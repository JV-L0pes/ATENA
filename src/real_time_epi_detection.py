#!/usr/bin/env python3
"""
Sistema de Detec√ß√£o de EPIs em Tempo Real para Canteiros de Obra
Integra c√¢mera otimizada com detector de EPIs para monitoramento cont√≠nuo
"""

import cv2
import numpy as np
import time
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import json
from datetime import datetime

from epi_detector_v2 import EPIDetectorV2
from construction_camera_system import ConstructionCameraSystem

class RealTimeEPIDetection:
    """
    Sistema principal de detec√ß√£o de EPIs em tempo real
    Monitora continuamente o canteiro de obra
    """
    
    def __init__(self, config_path: str = "config/epi_config_v2.yaml"):
        """Inicializa o sistema de detec√ß√£o em tempo real"""
        # Configura logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('real_time_epi.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        
        # Inicializa componentes
        self.epi_detector = EPIDetectorV2(config_path)
        self.camera_system = ConstructionCameraSystem()
        
        # Configura√ß√µes do sistema
        self.is_running = False
        self.frame_count = 0
        self.start_time = time.time()
        
        # Estat√≠sticas de detec√ß√£o
        self.detection_stats = {
            'total_frames': 0,
            'people_detected': 0,
            'helmet_violations': 0,
            'vest_violations': 0,
            'compliant_people': 0,
            'partial_compliance': 0
        }
        
        # Configura√ß√µes de alerta
        self.alert_settings = {
            'enable_alerts': True,
            'violation_threshold': 3,  # Alertas ap√≥s N viola√ß√µes consecutivas
            'alert_cooldown': 30,      # Segundos entre alertas
            'last_alert_time': 0
        }
        
        # Hist√≥rico de detec√ß√µes
        self.detection_history = []
        
        self.logger.info("Sistema de Detec√ß√£o de EPIs em Tempo Real inicializado")
    
    def start_monitoring(self) -> bool:
        """Inicia o monitoramento em tempo real"""
        try:
            # Inicia c√¢mera
            if not self.camera_system.start_camera():
                self.logger.error("Falha ao iniciar c√¢mera")
                return False
            
            # Otimiza c√¢mera para detec√ß√£o de EPIs
            self.camera_system.optimize_for_epi_detection()
            
            # Mostra informa√ß√µes da c√¢mera
            camera_info = self.camera_system.get_camera_info()
            self.logger.info(f"Informa√ß√µes da c√¢mera: {camera_info}")
            
            self.is_running = True
            self.logger.info("Monitoramento iniciado com sucesso")
            
            return True
            
        except Exception as e:
            self.logger.error(f"Erro ao iniciar monitoramento: {e}")
            return False
    
    def run_detection_loop(self) -> None:
        """Executa o loop principal de detec√ß√£o"""
        if not self.is_running:
            self.logger.error("Sistema n√£o est√° rodando")
            return
        
        print("\nüöÄ SISTEMA DE DETEC√á√ÉO DE EPIs EM TEMPO REAL")
        print("=" * 60)
        print("Controles:")
        print("  Q: Sair")
        print("  S: Salvar screenshot")
        print("  C: Ajustar configura√ß√µes de c√¢mera")
        print("  A: Alternar ambiente")
        print("  O: Otimizar para EPIs")
        print("  I: Mostrar informa√ß√µes")
        print("=" * 60)
        
        try:
            while self.is_running:
                # Captura frame
                frame = self.camera_system.get_frame()
                if frame is None:
                    continue
                
                # Processa frame para detec√ß√£o de EPIs
                processed_frame, people = self.epi_detector.process_image(frame)
                
                # Atualiza estat√≠sticas
                self._update_statistics(people)
                
                # Verifica viola√ß√µes e gera alertas
                self._check_violations(people)
                
                # Adiciona informa√ß√µes na tela
                info_frame = self._add_system_info(processed_frame)
                
                # Exibe frame
                cv2.imshow('Detec√ß√£o de EPIs em Tempo Real - Canteiro de Obra', info_frame)
                
                # Processa teclas
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('s'):
                    self._save_screenshot(info_frame)
                elif key == ord('c'):
                    self.camera_system.adjust_settings_interactive()
                elif key == ord('a'):
                    self._cycle_environment()
                elif key == ord('o'):
                    self.camera_system.optimize_for_epi_detection()
                elif key == ord('i'):
                    self._show_system_info()
                
                self.frame_count += 1
                
        except KeyboardInterrupt:
            self.logger.info("Monitoramento interrompido pelo usu√°rio")
        except Exception as e:
            self.logger.error(f"Erro no loop de detec√ß√£o: {e}")
        finally:
            self.stop_monitoring()
    
    def _update_statistics(self, people: list) -> None:
        """Atualiza estat√≠sticas de detec√ß√£o"""
        self.detection_stats['total_frames'] += 1
        self.detection_stats['people_detected'] = len(people)
        
        helmet_violations = 0
        vest_violations = 0
        compliant = 0
        partial = 0
        
        for person in people:
            if person.helmet_status.value == "AUSENTE":
                helmet_violations += 1
            if person.vest_status.value == "AUSENTE":
                vest_violations += 1
            
            if person.helmet_status.value == "CORRETO" and person.vest_status.value == "CORRETO":
                compliant += 1
            elif person.helmet_status.value == "CORRETO" or person.vest_status.value == "CORRETO":
                partial += 1
        
        self.detection_stats['helmet_violations'] = helmet_violations
        self.detection_stats['vest_violations'] = vest_violations
        self.detection_stats['compliant_people'] = compliant
        self.detection_stats['partial_compliance'] = partial
        
        # Adiciona ao hist√≥rico
        if people:
            self.detection_history.append({
                'timestamp': datetime.now().isoformat(),
                'frame': self.frame_count,
                'people_count': len(people),
                'violations': helmet_violations + vest_violations,
                'compliant': compliant
            })
            
            # Mant√©m apenas os √∫ltimos 1000 registros
            if len(self.detection_history) > 1000:
                self.detection_history.pop(0)
    
    def _check_violations(self, people: list) -> None:
        """Verifica viola√ß√µes e gera alertas"""
        if not self.alert_settings['enable_alerts']:
            return
        
        current_time = time.time()
        total_violations = self.detection_stats['helmet_violations'] + self.detection_stats['vest_violations']
        
        # Verifica se deve gerar alerta
        if (total_violations >= self.alert_settings['violation_threshold'] and 
            current_time - self.alert_settings['last_alert_time'] > self.alert_settings['alert_cooldown']):
            
            self._generate_violation_alert(people)
            self.alert_settings['last_alert_time'] = current_time
    
    def _generate_violation_alert(self, people: list) -> None:
        """Gera alerta de viola√ß√£o"""
        alert_msg = f"üö® ALERTA DE VIOLA√á√ÉO DE EPIs - {datetime.now().strftime('%H:%M:%S')}"
        print(f"\n{alert_msg}")
        print("=" * len(alert_msg))
        
        for i, person in enumerate(people):
            status = []
            if person.helmet_status.value == "AUSENTE":
                status.append("SEM CAPACETE")
            if person.vest_status.value == "AUSENTE":
                status.append("SEM COLETE")
            
            if status:
                print(f"Pessoa {i+1}: {' | '.join(status)}")
        
        print("=" * len(alert_msg))
        
        # Salva alerta em arquivo
        alert_data = {
            'timestamp': datetime.now().isoformat(),
            'frame': self.frame_count,
            'people_count': len(people),
            'violations': self.detection_stats['helmet_violations'] + self.detection_stats['vest_violations'],
            'details': [
                {
                    'person_id': i,
                    'helmet_status': person.helmet_status.value,
                    'vest_status': person.vest_status.value
                }
                for i, person in enumerate(people)
            ]
        }
        
        alert_file = f"alerts/epi_violation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        Path(alert_file).parent.mkdir(exist_ok=True)
        
        with open(alert_file, 'w') as f:
            json.dump(alert_data, f, indent=2)
        
        self.logger.warning(f"Alerta de viola√ß√£o salvo: {alert_file}")
    
    def _add_system_info(self, frame: np.ndarray) -> np.ndarray:
        """Adiciona informa√ß√µes do sistema na tela"""
        info_frame = frame.copy()
        
        # Calcula FPS
        elapsed_time = time.time() - self.start_time
        fps = self.frame_count / elapsed_time if elapsed_time > 0 else 0
        
        # Informa√ß√µes b√°sicas
        info_text = [
            f"EPI Detection System - Canteiro de Obra",
            f"FPS: {fps:.1f} | Frame: {self.frame_count}",
            f"Pessoas: {self.detection_stats['people_detected']}",
            f"Compliance: {self.detection_stats['compliant_people']}",
            f"Parcial: {self.detection_stats['partial_compliance']}",
            f"Violacoes: {self.detection_stats['helmet_violations'] + self.detection_stats['vest_violations']}",
            f"Ambiente: {self.camera_system.current_environment}",
            "",
            "Q: Sair | S: Screenshot | C: Camera | A: Ambiente | O: Otimizar"
        ]
        
        # Desenha informa√ß√µes
        y_offset = 30
        for i, text in enumerate(info_text):
            if i == 0:  # T√≠tulo
                color = (255, 255, 255)
                thickness = 2
            elif i < 7:  # M√©tricas
                color = (0, 255, 255)
                thickness = 1
            elif i == 7:  # Linha vazia
                continue
            else:  # Controles
                color = (0, 255, 0)
                thickness = 1
            
            cv2.putText(info_frame, text, (10, y_offset + i * 25), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, thickness)
        
        return info_frame
    
    def _save_screenshot(self, frame: np.ndarray) -> None:
        """Salva screenshot da detec√ß√£o"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"screenshots/epi_detection_{timestamp}.jpg"
        
        Path(filename).parent.mkdir(exist_ok=True)
        cv2.imwrite(filename, frame)
        
        print(f"üì∏ Screenshot salvo: {filename}")
        self.logger.info(f"Screenshot salvo: {filename}")
    
    def _cycle_environment(self) -> None:
        """Alterna entre ambientes dispon√≠veis"""
        environments = list(self.camera_system.environment_settings.keys())
        current_idx = environments.index(self.camera_system.current_environment)
        next_idx = (current_idx + 1) % len(environments)
        next_env = environments[next_idx]
        
        if self.camera_system.set_environment(next_env):
            print(f"üåç Ambiente alterado para: {next_env}")
    
    def _show_system_info(self) -> None:
        """Mostra informa√ß√µes detalhadas do sistema"""
        print("\nüìä INFORMA√á√ïES DO SISTEMA")
        print("=" * 50)
        
        # Informa√ß√µes da c√¢mera
        camera_info = self.camera_system.get_camera_info()
        print("üìπ C√ÇMERA:")
        for key, value in camera_info.items():
            print(f"  {key}: {value}")
        
        # Estat√≠sticas de detec√ß√£o
        print(f"\nüìà ESTAT√çSTICAS:")
        print(f"  Frames processados: {self.detection_stats['total_frames']}")
        print(f"  Pessoas detectadas: {self.detection_stats['people_detected']}")
        print(f"  Compliance total: {self.detection_stats['compliant_people']}")
        print(f"  Compliance parcial: {self.detection_stats['partial_compliance']}")
        print(f"  Viola√ß√µes de capacete: {self.detection_stats['helmet_violations']}")
        print(f"  Viola√ß√µes de colete: {self.detection_stats['vest_violations']}")
        
        # Performance
        elapsed_time = time.time() - self.start_time
        fps = self.frame_count / elapsed_time if elapsed_time > 0 else 0
        print(f"\n‚ö° PERFORMANCE:")
        print(f"  FPS m√©dio: {fps:.1f}")
        print(f"  Tempo de execu√ß√£o: {elapsed_time:.1f}s")
        
        print("=" * 50)
    
    def stop_monitoring(self) -> None:
        """Para o monitoramento"""
        self.is_running = False
        self.camera_system.release()
        cv2.destroyAllWindows()
        
        # Salva estat√≠sticas finais
        self._save_final_statistics()
        
        self.logger.info("Monitoramento parado")
    
    def _save_final_statistics(self) -> None:
        """Salva estat√≠sticas finais da sess√£o"""
        final_stats = {
            'session_info': {
                'start_time': datetime.fromtimestamp(self.start_time).isoformat(),
                'end_time': datetime.now().isoformat(),
                'total_frames': self.frame_count,
                'total_time': time.time() - self.start_time
            },
            'detection_summary': self.detection_stats,
            'detection_history': self.detection_history
        }
        
        stats_file = f"statistics/epi_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        Path(stats_file).parent.mkdir(exist_ok=True)
        
        with open(stats_file, 'w') as f:
            json.dump(final_stats, f, indent=2)
        
        self.logger.info(f"Estat√≠sticas finais salvas: {stats_file}")
    
    def run(self) -> None:
        """Executa o sistema completo"""
        try:
            if self.start_monitoring():
                self.run_detection_loop()
            else:
                self.logger.error("Falha ao iniciar monitoramento")
        except Exception as e:
            self.logger.error(f"Erro no sistema: {e}")
        finally:
            self.stop_monitoring()

def main():
    """Fun√ß√£o principal"""
    print("üöß SISTEMA DE DETEC√á√ÉO AUTOM√ÅTICA DE EPIs EM CANTEIROS DE OBRA")
    print("=" * 70)
    print("üéØ OBJETIVO: Detectar e validar EPIs fisicamente na pessoa")
    print("üìã REGRAS:")
    print("   ‚úÖ Capacete deve estar na cabe√ßa (n√£o na m√£o, no ch√£o)")
    print("   ‚úÖ Colete deve estar no torso (n√£o pendurado, dobrado)")
    print("   ‚ùå Infra√ß√£o: EPI presente mas n√£o na pessoa")
    print("=" * 70)
    
    # Cria diret√≥rios necess√°rios
    Path("screenshots").mkdir(exist_ok=True)
    Path("alerts").mkdir(exist_ok=True)
    Path("statistics").mkdir(exist_ok=True)
    
    # Inicia sistema
    system = RealTimeEPIDetection()
    system.run()

if __name__ == "__main__":
    main()
